*   Separate State class into StableState and PendingState
    *   StableState is constrained to be a valid game state awaiting the next player's input
    *   PendingState may be an invalid game state, awaiting interaction from the game engine or rule evaluation
    *   StableState may be converted to JSON, PendingState may not since it should never be shown to an observer
*   Implement Go rules
    *   End game after both players pass
    *   Capture stones with no liberties
DONE    *   Capture a single stone
        *   Capture a group of stones
    *   Detect illegal moves
        *   Placing a stone that will have no liberties
        *   Allow placing stone with no liberties if it will cause a capture that results in the stone having liberties
        *   Disallow recreation of previous state by rule of Ko
    *   Scoring
*   Add undo/redo/tree traversal of game history
    *   Save state history as linked list
*   Change GoRules to GoRuleChecker and make it an instanced class